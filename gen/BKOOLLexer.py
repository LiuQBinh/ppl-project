# Generated from C:/Users/luuqu/OneDrive/Documents/GitHub/ppl-project/assignment1/src/main/bkool/parser\BKOOL.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


    from lexererr import *


def serializedATN():
    return [
        4,0,121,871,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
        91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,
        97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
        7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,16,1,16,5,16,310,8,16,10,16,12,16,313,9,16,1,
        16,1,16,1,17,1,17,1,17,1,17,5,17,321,8,17,10,17,12,17,324,9,17,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,333,8,18,10,18,12,18,336,9,
        18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
        37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,
        43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,3,47,398,8,47,1,48,1,
        48,1,48,5,48,403,8,48,10,48,12,48,406,9,48,1,48,1,48,1,48,1,48,5,
        48,412,8,48,10,48,12,48,415,9,48,1,48,1,48,5,48,419,8,48,10,48,12,
        48,422,9,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,
        50,3,50,435,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,
        51,446,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,54,1,
        54,1,54,1,55,1,55,1,55,1,55,5,55,464,8,55,10,55,12,55,467,9,55,1,
        55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,3,56,478,8,56,1,56,1,
        56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,488,8,57,1,57,1,57,1,58,1,
        58,1,59,1,59,3,59,496,8,59,1,59,4,59,499,8,59,11,59,12,59,500,1,
        60,1,60,5,60,505,8,60,10,60,12,60,508,9,60,1,61,1,61,1,61,5,61,513,
        8,61,10,61,12,61,516,9,61,1,61,3,61,519,8,61,1,61,4,61,522,8,61,
        11,61,12,61,523,5,61,526,8,61,10,61,12,61,529,9,61,3,61,531,8,61,
        1,62,1,62,1,62,5,62,536,8,62,10,62,12,62,539,9,62,1,63,1,63,1,63,
        1,63,5,63,545,8,63,10,63,12,63,548,9,63,1,64,1,64,1,64,1,64,5,64,
        554,8,64,10,64,12,64,557,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,
        1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,
        1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,
        1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,
        1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,
        1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,
        1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,1,107,1,108,1,108,
        1,108,1,109,1,109,1,109,1,110,1,110,1,110,1,111,1,111,1,112,1,112,
        1,113,1,113,1,114,1,114,1,114,1,115,1,115,1,115,1,116,1,116,1,116,
        1,116,1,117,1,117,1,117,1,118,1,118,1,119,1,119,1,119,1,120,1,120,
        1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,126,
        1,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,3,130,835,
        8,130,1,131,1,131,5,131,839,8,131,10,131,12,131,842,9,131,1,132,
        1,132,4,132,846,8,132,11,132,12,132,847,1,133,4,133,851,8,133,11,
        133,12,133,852,1,133,1,133,1,134,1,134,1,134,1,134,5,134,861,8,134,
        10,134,12,134,864,9,134,1,134,1,134,1,134,1,135,1,135,1,135,3,322,
        465,862,0,136,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,0,101,0,103,0,105,0,107,0,109,0,
        111,50,113,51,115,52,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,
        53,133,54,135,55,137,56,139,57,141,58,143,59,145,60,147,61,149,62,
        151,63,153,64,155,65,157,66,159,67,161,68,163,69,165,70,167,71,169,
        72,171,73,173,74,175,75,177,76,179,77,181,78,183,79,185,80,187,81,
        189,82,191,83,193,84,195,85,197,86,199,87,201,88,203,89,205,90,207,
        91,209,92,211,93,213,94,215,95,217,96,219,97,221,98,223,99,225,100,
        227,101,229,102,231,103,233,104,235,105,237,106,239,107,241,108,
        243,109,245,110,247,111,249,112,251,113,253,114,255,115,257,116,
        259,117,261,118,263,0,265,0,267,119,269,120,271,121,1,0,19,2,0,10,
        10,13,13,1,0,34,34,7,0,39,39,92,92,98,98,102,102,110,110,114,114,
        116,116,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,
        1,0,48,57,1,0,49,57,1,0,48,55,2,0,48,55,95,95,2,0,88,88,120,120,
        2,0,48,57,65,70,3,0,48,57,65,70,95,95,2,0,66,66,98,98,1,0,48,49,
        2,0,48,49,95,95,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,8,10,12,13,32,32,891,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,131,1,0,0,
        0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,
        1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,
        0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,
        0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,
        169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,
        0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,
        1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,
        0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,
        0,0,0,0,207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,
        215,1,0,0,0,0,217,1,0,0,0,0,219,1,0,0,0,0,221,1,0,0,0,0,223,1,0,
        0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,229,1,0,0,0,0,231,1,0,0,0,0,233,
        1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,239,1,0,0,0,0,241,1,0,0,0,
        0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,249,1,0,0,0,0,251,1,
        0,0,0,0,253,1,0,0,0,0,255,1,0,0,0,0,257,1,0,0,0,0,259,1,0,0,0,0,
        261,1,0,0,0,0,267,1,0,0,0,0,269,1,0,0,0,0,271,1,0,0,0,1,273,1,0,
        0,0,3,275,1,0,0,0,5,277,1,0,0,0,7,279,1,0,0,0,9,281,1,0,0,0,11,283,
        1,0,0,0,13,285,1,0,0,0,15,287,1,0,0,0,17,289,1,0,0,0,19,291,1,0,
        0,0,21,293,1,0,0,0,23,295,1,0,0,0,25,297,1,0,0,0,27,299,1,0,0,0,
        29,301,1,0,0,0,31,303,1,0,0,0,33,305,1,0,0,0,35,316,1,0,0,0,37,330,
        1,0,0,0,39,339,1,0,0,0,41,341,1,0,0,0,43,343,1,0,0,0,45,345,1,0,
        0,0,47,347,1,0,0,0,49,349,1,0,0,0,51,351,1,0,0,0,53,353,1,0,0,0,
        55,355,1,0,0,0,57,357,1,0,0,0,59,359,1,0,0,0,61,361,1,0,0,0,63,363,
        1,0,0,0,65,365,1,0,0,0,67,367,1,0,0,0,69,369,1,0,0,0,71,371,1,0,
        0,0,73,373,1,0,0,0,75,375,1,0,0,0,77,377,1,0,0,0,79,379,1,0,0,0,
        81,381,1,0,0,0,83,383,1,0,0,0,85,385,1,0,0,0,87,387,1,0,0,0,89,389,
        1,0,0,0,91,391,1,0,0,0,93,393,1,0,0,0,95,397,1,0,0,0,97,399,1,0,
        0,0,99,426,1,0,0,0,101,434,1,0,0,0,103,445,1,0,0,0,105,447,1,0,0,
        0,107,454,1,0,0,0,109,456,1,0,0,0,111,459,1,0,0,0,113,477,1,0,0,
        0,115,481,1,0,0,0,117,491,1,0,0,0,119,493,1,0,0,0,121,502,1,0,0,
        0,123,530,1,0,0,0,125,532,1,0,0,0,127,540,1,0,0,0,129,549,1,0,0,
        0,131,558,1,0,0,0,133,566,1,0,0,0,135,571,1,0,0,0,137,579,1,0,0,
        0,139,585,1,0,0,0,141,594,1,0,0,0,143,597,1,0,0,0,145,604,1,0,0,
        0,147,609,1,0,0,0,149,613,1,0,0,0,151,618,1,0,0,0,153,624,1,0,0,
        0,155,630,1,0,0,0,157,633,1,0,0,0,159,637,1,0,0,0,161,643,1,0,0,
        0,163,651,1,0,0,0,165,658,1,0,0,0,167,664,1,0,0,0,169,669,1,0,0,
        0,171,673,1,0,0,0,173,677,1,0,0,0,175,682,1,0,0,0,177,694,1,0,0,
        0,179,705,1,0,0,0,181,709,1,0,0,0,183,712,1,0,0,0,185,715,1,0,0,
        0,187,722,1,0,0,0,189,727,1,0,0,0,191,732,1,0,0,0,193,736,1,0,0,
        0,195,741,1,0,0,0,197,747,1,0,0,0,199,754,1,0,0,0,201,757,1,0,0,
        0,203,764,1,0,0,0,205,766,1,0,0,0,207,768,1,0,0,0,209,770,1,0,0,
        0,211,772,1,0,0,0,213,774,1,0,0,0,215,776,1,0,0,0,217,779,1,0,0,
        0,219,782,1,0,0,0,221,785,1,0,0,0,223,788,1,0,0,0,225,790,1,0,0,
        0,227,792,1,0,0,0,229,794,1,0,0,0,231,797,1,0,0,0,233,800,1,0,0,
        0,235,804,1,0,0,0,237,807,1,0,0,0,239,809,1,0,0,0,241,812,1,0,0,
        0,243,814,1,0,0,0,245,816,1,0,0,0,247,818,1,0,0,0,249,820,1,0,0,
        0,251,822,1,0,0,0,253,824,1,0,0,0,255,826,1,0,0,0,257,828,1,0,0,
        0,259,830,1,0,0,0,261,834,1,0,0,0,263,836,1,0,0,0,265,843,1,0,0,
        0,267,850,1,0,0,0,269,856,1,0,0,0,271,868,1,0,0,0,273,274,3,165,
        82,0,274,2,1,0,0,0,275,276,3,131,65,0,276,4,1,0,0,0,277,278,3,135,
        67,0,278,6,1,0,0,0,279,280,3,189,94,0,280,8,1,0,0,0,281,282,3,171,
        85,0,282,10,1,0,0,0,283,284,3,169,84,0,284,12,1,0,0,0,285,286,3,
        141,70,0,286,14,1,0,0,0,287,288,3,187,93,0,288,16,1,0,0,0,289,290,
        3,145,72,0,290,18,1,0,0,0,291,292,3,143,71,0,292,20,1,0,0,0,293,
        294,3,147,73,0,294,22,1,0,0,0,295,296,3,223,111,0,296,24,1,0,0,0,
        297,298,3,199,99,0,298,26,1,0,0,0,299,300,3,183,91,0,300,28,1,0,
        0,0,301,302,3,137,68,0,302,30,1,0,0,0,303,304,3,163,81,0,304,32,
        1,0,0,0,305,306,5,47,0,0,306,307,5,47,0,0,307,311,1,0,0,0,308,310,
        8,0,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,
        1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,6,16,0,0,315,34,
        1,0,0,0,316,317,5,47,0,0,317,318,5,42,0,0,318,322,1,0,0,0,319,321,
        9,0,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,323,1,0,0,0,322,320,
        1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,42,0,0,326,327,
        5,47,0,0,327,328,1,0,0,0,328,329,6,17,0,0,329,36,1,0,0,0,330,334,
        5,35,0,0,331,333,8,0,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,
        1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,338,
        6,18,0,0,338,38,1,0,0,0,339,340,3,161,80,0,340,40,1,0,0,0,341,342,
        3,157,78,0,342,42,1,0,0,0,343,344,3,159,79,0,344,44,1,0,0,0,345,
        346,3,185,92,0,346,46,1,0,0,0,347,348,3,153,76,0,348,48,1,0,0,0,
        349,350,3,133,66,0,350,50,1,0,0,0,351,352,3,175,87,0,352,52,1,0,
        0,0,353,354,3,177,88,0,354,54,1,0,0,0,355,356,3,173,86,0,356,56,
        1,0,0,0,357,358,3,203,101,0,358,58,1,0,0,0,359,360,3,205,102,0,360,
        60,1,0,0,0,361,362,3,207,103,0,362,62,1,0,0,0,363,364,3,209,104,
        0,364,64,1,0,0,0,365,366,3,211,105,0,366,66,1,0,0,0,367,368,3,213,
        106,0,368,68,1,0,0,0,369,370,3,215,107,0,370,70,1,0,0,0,371,372,
        3,217,108,0,372,72,1,0,0,0,373,374,3,219,109,0,374,74,1,0,0,0,375,
        376,3,221,110,0,376,76,1,0,0,0,377,378,3,225,112,0,378,78,1,0,0,
        0,379,380,3,227,113,0,380,80,1,0,0,0,381,382,3,229,114,0,382,82,
        1,0,0,0,383,384,3,231,115,0,384,84,1,0,0,0,385,386,3,233,116,0,386,
        86,1,0,0,0,387,388,3,235,117,0,388,88,1,0,0,0,389,390,3,255,127,
        0,390,90,1,0,0,0,391,392,3,239,119,0,392,92,1,0,0,0,393,394,3,259,
        129,0,394,94,1,0,0,0,395,398,3,149,74,0,396,398,3,151,75,0,397,395,
        1,0,0,0,397,396,1,0,0,0,398,96,1,0,0,0,399,404,5,34,0,0,400,401,
        5,39,0,0,401,403,5,34,0,0,402,400,1,0,0,0,403,406,1,0,0,0,404,402,
        1,0,0,0,404,405,1,0,0,0,405,413,1,0,0,0,406,404,1,0,0,0,407,412,
        3,99,49,0,408,412,8,1,0,0,409,410,5,39,0,0,410,412,5,34,0,0,411,
        407,1,0,0,0,411,408,1,0,0,0,411,409,1,0,0,0,412,415,1,0,0,0,413,
        411,1,0,0,0,413,414,1,0,0,0,414,420,1,0,0,0,415,413,1,0,0,0,416,
        417,5,39,0,0,417,419,5,34,0,0,418,416,1,0,0,0,419,422,1,0,0,0,420,
        418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,423,
        424,5,34,0,0,424,425,6,48,1,0,425,98,1,0,0,0,426,427,5,92,0,0,427,
        428,7,2,0,0,428,100,1,0,0,0,429,430,5,92,0,0,430,435,8,2,0,0,431,
        435,3,105,52,0,432,435,3,103,51,0,433,435,3,109,54,0,434,429,1,0,
        0,0,434,431,1,0,0,0,434,432,1,0,0,0,434,433,1,0,0,0,435,102,1,0,
        0,0,436,437,5,92,0,0,437,438,2,48,51,0,438,439,2,48,55,0,439,446,
        2,48,55,0,440,441,5,92,0,0,441,442,2,48,55,0,442,446,2,48,55,0,443,
        444,5,92,0,0,444,446,2,48,55,0,445,436,1,0,0,0,445,440,1,0,0,0,445,
        443,1,0,0,0,446,104,1,0,0,0,447,448,5,92,0,0,448,449,5,117,0,0,449,
        450,3,107,53,0,450,451,3,107,53,0,451,452,3,107,53,0,452,453,3,107,
        53,0,453,106,1,0,0,0,454,455,7,3,0,0,455,108,1,0,0,0,456,457,5,92,
        0,0,457,458,5,104,0,0,458,110,1,0,0,0,459,460,5,35,0,0,460,461,5,
        35,0,0,461,465,1,0,0,0,462,464,9,0,0,0,463,462,1,0,0,0,464,467,1,
        0,0,0,465,466,1,0,0,0,465,463,1,0,0,0,466,468,1,0,0,0,467,465,1,
        0,0,0,468,469,5,35,0,0,469,470,5,35,0,0,470,471,1,0,0,0,471,472,
        6,55,0,0,472,112,1,0,0,0,473,478,3,123,61,0,474,478,3,125,62,0,475,
        478,3,127,63,0,476,478,3,129,64,0,477,473,1,0,0,0,477,474,1,0,0,
        0,477,475,1,0,0,0,477,476,1,0,0,0,478,479,1,0,0,0,479,480,6,56,2,
        0,480,114,1,0,0,0,481,487,3,117,58,0,482,488,3,121,60,0,483,488,
        3,119,59,0,484,485,3,121,60,0,485,486,3,119,59,0,486,488,1,0,0,0,
        487,482,1,0,0,0,487,483,1,0,0,0,487,484,1,0,0,0,488,489,1,0,0,0,
        489,490,6,57,3,0,490,116,1,0,0,0,491,492,3,123,61,0,492,118,1,0,
        0,0,493,495,7,4,0,0,494,496,7,5,0,0,495,494,1,0,0,0,495,496,1,0,
        0,0,496,498,1,0,0,0,497,499,7,6,0,0,498,497,1,0,0,0,499,500,1,0,
        0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,120,1,0,0,0,502,506,3,255,
        127,0,503,505,7,6,0,0,504,503,1,0,0,0,505,508,1,0,0,0,506,504,1,
        0,0,0,506,507,1,0,0,0,507,122,1,0,0,0,508,506,1,0,0,0,509,531,5,
        48,0,0,510,527,7,7,0,0,511,513,7,6,0,0,512,511,1,0,0,0,513,516,1,
        0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,518,1,0,0,0,516,514,1,
        0,0,0,517,519,5,95,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,521,1,
        0,0,0,520,522,7,6,0,0,521,520,1,0,0,0,522,523,1,0,0,0,523,521,1,
        0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,514,1,0,0,0,526,529,1,
        0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,527,1,
        0,0,0,530,509,1,0,0,0,530,510,1,0,0,0,531,124,1,0,0,0,532,533,5,
        48,0,0,533,537,7,8,0,0,534,536,7,9,0,0,535,534,1,0,0,0,536,539,1,
        0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,126,1,0,0,0,539,537,1,
        0,0,0,540,541,5,48,0,0,541,542,7,10,0,0,542,546,7,11,0,0,543,545,
        7,12,0,0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,
        1,0,0,0,547,128,1,0,0,0,548,546,1,0,0,0,549,550,5,48,0,0,550,551,
        7,13,0,0,551,555,7,14,0,0,552,554,7,15,0,0,553,552,1,0,0,0,554,557,
        1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,130,1,0,0,0,557,555,
        1,0,0,0,558,559,5,80,0,0,559,560,5,114,0,0,560,561,5,111,0,0,561,
        562,5,103,0,0,562,563,5,114,0,0,563,564,5,97,0,0,564,565,5,109,0,
        0,565,132,1,0,0,0,566,567,5,109,0,0,567,568,5,97,0,0,568,569,5,105,
        0,0,569,570,5,110,0,0,570,134,1,0,0,0,571,572,5,101,0,0,572,573,
        5,120,0,0,573,574,5,116,0,0,574,575,5,101,0,0,575,576,5,110,0,0,
        576,577,5,100,0,0,577,578,5,115,0,0,578,136,1,0,0,0,579,580,5,98,
        0,0,580,581,5,114,0,0,581,582,5,101,0,0,582,583,5,97,0,0,583,584,
        5,107,0,0,584,138,1,0,0,0,585,586,5,99,0,0,586,587,5,111,0,0,587,
        588,5,110,0,0,588,589,5,116,0,0,589,590,5,105,0,0,590,591,5,110,
        0,0,591,592,5,117,0,0,592,593,5,101,0,0,593,140,1,0,0,0,594,595,
        5,105,0,0,595,596,5,102,0,0,596,142,1,0,0,0,597,598,5,101,0,0,598,
        599,5,108,0,0,599,600,5,115,0,0,600,601,5,101,0,0,601,602,5,105,
        0,0,602,603,5,102,0,0,603,144,1,0,0,0,604,605,5,101,0,0,605,606,
        5,108,0,0,606,607,5,115,0,0,607,608,5,101,0,0,608,146,1,0,0,0,609,
        610,5,102,0,0,610,611,5,111,0,0,611,612,5,114,0,0,612,148,1,0,0,
        0,613,614,5,116,0,0,614,615,5,114,0,0,615,616,5,117,0,0,616,617,
        5,101,0,0,617,150,1,0,0,0,618,619,5,102,0,0,619,620,5,97,0,0,620,
        621,5,108,0,0,621,622,5,115,0,0,622,623,5,101,0,0,623,152,1,0,0,
        0,624,625,5,97,0,0,625,626,5,114,0,0,626,627,5,114,0,0,627,628,5,
        97,0,0,628,629,5,121,0,0,629,154,1,0,0,0,630,631,5,105,0,0,631,632,
        5,110,0,0,632,156,1,0,0,0,633,634,5,105,0,0,634,635,5,110,0,0,635,
        636,5,116,0,0,636,158,1,0,0,0,637,638,5,102,0,0,638,639,5,108,0,
        0,639,640,5,111,0,0,640,641,5,97,0,0,641,642,5,116,0,0,642,160,1,
        0,0,0,643,644,5,98,0,0,644,645,5,111,0,0,645,646,5,111,0,0,646,647,
        5,108,0,0,647,648,5,101,0,0,648,649,5,97,0,0,649,650,5,110,0,0,650,
        162,1,0,0,0,651,652,5,114,0,0,652,653,5,101,0,0,653,654,5,116,0,
        0,654,655,5,117,0,0,655,656,5,114,0,0,656,657,5,110,0,0,657,164,
        1,0,0,0,658,659,5,99,0,0,659,660,5,108,0,0,660,661,5,97,0,0,661,
        662,5,115,0,0,662,663,5,115,0,0,663,166,1,0,0,0,664,665,5,78,0,0,
        665,666,5,117,0,0,666,667,5,108,0,0,667,668,5,108,0,0,668,168,1,
        0,0,0,669,670,5,118,0,0,670,671,5,97,0,0,671,672,5,108,0,0,672,170,
        1,0,0,0,673,674,5,118,0,0,674,675,5,97,0,0,675,676,5,114,0,0,676,
        172,1,0,0,0,677,678,5,115,0,0,678,679,5,101,0,0,679,680,5,108,0,
        0,680,681,5,102,0,0,681,174,1,0,0,0,682,683,5,99,0,0,683,684,5,111,
        0,0,684,685,5,110,0,0,685,686,5,115,0,0,686,687,5,116,0,0,687,688,
        5,114,0,0,688,689,5,117,0,0,689,690,5,99,0,0,690,691,5,116,0,0,691,
        692,5,111,0,0,692,693,5,114,0,0,693,176,1,0,0,0,694,695,5,100,0,
        0,695,696,5,101,0,0,696,697,5,115,0,0,697,698,5,116,0,0,698,699,
        5,114,0,0,699,700,5,117,0,0,700,701,5,99,0,0,701,702,5,116,0,0,702,
        703,5,111,0,0,703,704,5,114,0,0,704,178,1,0,0,0,705,706,5,110,0,
        0,706,707,5,101,0,0,707,708,5,119,0,0,708,180,1,0,0,0,709,710,5,
        66,0,0,710,711,5,121,0,0,711,182,1,0,0,0,712,713,5,100,0,0,713,714,
        5,111,0,0,714,184,1,0,0,0,715,716,5,115,0,0,716,717,5,116,0,0,717,
        718,5,114,0,0,718,719,5,105,0,0,719,720,5,110,0,0,720,721,5,103,
        0,0,721,186,1,0,0,0,722,723,5,116,0,0,723,724,5,104,0,0,724,725,
        5,101,0,0,725,726,5,110,0,0,726,188,1,0,0,0,727,728,5,118,0,0,728,
        729,5,111,0,0,729,730,5,105,0,0,730,731,5,100,0,0,731,190,1,0,0,
        0,732,733,5,110,0,0,733,734,5,105,0,0,734,735,5,108,0,0,735,192,
        1,0,0,0,736,737,5,116,0,0,737,738,5,104,0,0,738,739,5,105,0,0,739,
        740,5,115,0,0,740,194,1,0,0,0,741,742,5,102,0,0,742,743,5,105,0,
        0,743,744,5,110,0,0,744,745,5,97,0,0,745,746,5,108,0,0,746,196,1,
        0,0,0,747,748,5,115,0,0,748,749,5,116,0,0,749,750,5,97,0,0,750,751,
        5,116,0,0,751,752,5,105,0,0,752,753,5,99,0,0,753,198,1,0,0,0,754,
        755,5,116,0,0,755,756,5,111,0,0,756,200,1,0,0,0,757,758,5,100,0,
        0,758,759,5,111,0,0,759,760,5,119,0,0,760,761,5,110,0,0,761,762,
        5,116,0,0,762,763,5,111,0,0,763,202,1,0,0,0,764,765,5,43,0,0,765,
        204,1,0,0,0,766,767,5,45,0,0,767,206,1,0,0,0,768,769,5,42,0,0,769,
        208,1,0,0,0,770,771,5,47,0,0,771,210,1,0,0,0,772,773,5,37,0,0,773,
        212,1,0,0,0,774,775,5,33,0,0,775,214,1,0,0,0,776,777,5,38,0,0,777,
        778,5,38,0,0,778,216,1,0,0,0,779,780,5,124,0,0,780,781,5,124,0,0,
        781,218,1,0,0,0,782,783,5,61,0,0,783,784,5,61,0,0,784,220,1,0,0,
        0,785,786,5,33,0,0,786,787,5,61,0,0,787,222,1,0,0,0,788,789,5,61,
        0,0,789,224,1,0,0,0,790,791,5,62,0,0,791,226,1,0,0,0,792,793,5,60,
        0,0,793,228,1,0,0,0,794,795,5,62,0,0,795,796,5,61,0,0,796,230,1,
        0,0,0,797,798,5,60,0,0,798,799,5,61,0,0,799,232,1,0,0,0,800,801,
        5,61,0,0,801,802,5,61,0,0,802,803,5,46,0,0,803,234,1,0,0,0,804,805,
        5,43,0,0,805,806,5,46,0,0,806,236,1,0,0,0,807,808,5,94,0,0,808,238,
        1,0,0,0,809,810,5,58,0,0,810,811,5,58,0,0,811,240,1,0,0,0,812,813,
        5,40,0,0,813,242,1,0,0,0,814,815,5,41,0,0,815,244,1,0,0,0,816,817,
        5,91,0,0,817,246,1,0,0,0,818,819,5,93,0,0,819,248,1,0,0,0,820,821,
        5,123,0,0,821,250,1,0,0,0,822,823,5,125,0,0,823,252,1,0,0,0,824,
        825,5,59,0,0,825,254,1,0,0,0,826,827,5,46,0,0,827,256,1,0,0,0,828,
        829,5,44,0,0,829,258,1,0,0,0,830,831,5,58,0,0,831,260,1,0,0,0,832,
        835,3,263,131,0,833,835,3,265,132,0,834,832,1,0,0,0,834,833,1,0,
        0,0,835,262,1,0,0,0,836,840,7,16,0,0,837,839,7,17,0,0,838,837,1,
        0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,264,1,
        0,0,0,842,840,1,0,0,0,843,845,5,36,0,0,844,846,7,17,0,0,845,844,
        1,0,0,0,846,847,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,266,
        1,0,0,0,849,851,7,18,0,0,850,849,1,0,0,0,851,852,1,0,0,0,852,850,
        1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,0,854,855,6,133,0,0,855,268,
        1,0,0,0,856,857,5,35,0,0,857,858,5,35,0,0,858,862,1,0,0,0,859,861,
        9,0,0,0,860,859,1,0,0,0,861,864,1,0,0,0,862,863,1,0,0,0,862,860,
        1,0,0,0,863,865,1,0,0,0,864,862,1,0,0,0,865,866,5,0,0,1,866,867,
        6,134,4,0,867,270,1,0,0,0,868,869,9,0,0,0,869,870,6,135,5,0,870,
        272,1,0,0,0,30,0,311,322,334,397,404,411,413,420,434,445,465,477,
        487,495,500,506,514,518,523,527,530,537,546,555,834,840,847,852,
        862,6,6,0,0,1,48,0,1,56,1,1,57,2,1,134,3,1,135,4
    ]

class BKOOLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Class_word = 1
    Prog_word = 2
    Extends_word = 3
    Void_word = 4
    Var_word = 5
    Val_word = 6
    If_word = 7
    Then_word = 8
    Else_word = 9
    Elseif_word = 10
    For_word = 11
    Assign_op = 12
    To_word = 13
    Do_word = 14
    Break_word = 15
    Return_word = 16
    Comment_normal = 17
    Comment_block = 18
    Comment_sharp = 19
    Bool_word = 20
    Int_word = 21
    Float_word = 22
    Str_word = 23
    Array_word = 24
    Main_word = 25
    Cons_word = 26
    Dest_word = 27
    Self_word = 28
    Add = 29
    Sub = 30
    Mul = 31
    Div = 32
    Mod = 33
    Not = 34
    And = 35
    Or = 36
    Equal = 37
    Diff = 38
    Greater = 39
    Lesser = 40
    Greater_euqal = 41
    Lesser_equal = 42
    String_comp = 43
    String_concat = 44
    Member_access_in = 45
    Member_access_out = 46
    Colon = 47
    BOOLEANLIT = 48
    STRINGLIT = 49
    BLOCKCOMMENT = 50
    INTLIT = 51
    FLOATLIT = 52
    PROGRAM = 53
    MAIN = 54
    EXTENDS = 55
    BREAK = 56
    CONT = 57
    IF = 58
    ELSEIF = 59
    ELSE = 60
    FOR = 61
    BOOLTRUE = 62
    BOOLFALSE = 63
    ARRAY = 64
    IN = 65
    INT = 66
    FLOAT = 67
    BOOL = 68
    RETURN = 69
    CLASS = 70
    NULL = 71
    VAL = 72
    VAR = 73
    SELF = 74
    CONS = 75
    DEST = 76
    KEYWORD_NEW = 77
    BY = 78
    DO = 79
    STRING = 80
    THEN = 81
    VOID = 82
    NIL = 83
    THIS = 84
    FINAL = 85
    STATIC = 86
    TO = 87
    DOWNTO = 88
    ADD_OP = 89
    SUB_OP = 90
    MUL_OP = 91
    FLOAT_DIVISION_OP = 92
    MOD_OP = 93
    NOT_OP = 94
    AND_OP = 95
    OR_OP = 96
    EQUAL_OP = 97
    NOT_EQUAL_OP = 98
    ASSIGN_OP = 99
    GREATER_OP = 100
    LESS_OP = 101
    GREATER_EQUAL_OP = 102
    LESS_EQUAL_OP = 103
    STRING_COMP_OP = 104
    STRING_CONCAT_OP = 105
    CONCATENATION_OP = 106
    MEMBER_ACCESS_OUT = 107
    LP = 108
    RP = 109
    LSB = 110
    RSB = 111
    LB = 112
    RB = 113
    SEMI = 114
    DOT = 115
    COMA = 116
    COLON = 117
    ID = 118
    WS = 119
    UNTERMINATED_COMMENT = 120
    ERROR_CHAR = 121

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Program'", "'main'", "'extends'", "'break'", "'continue'", 
            "'if'", "'elseif'", "'else'", "'for'", "'true'", "'false'", 
            "'array'", "'in'", "'int'", "'float'", "'boolean'", "'return'", 
            "'class'", "'Null'", "'val'", "'var'", "'self'", "'constructor'", 
            "'destructor'", "'new'", "'By'", "'do'", "'string'", "'then'", 
            "'void'", "'nil'", "'this'", "'final'", "'static'", "'to'", 
            "'downto'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'&&'", 
            "'||'", "'=='", "'!='", "'='", "'>'", "'<'", "'>='", "'<='", 
            "'==.'", "'+.'", "'^'", "'::'", "'('", "')'", "'['", "']'", 
            "'{'", "'}'", "';'", "'.'", "','", "':'" ]

    symbolicNames = [ "<INVALID>",
            "Class_word", "Prog_word", "Extends_word", "Void_word", "Var_word", 
            "Val_word", "If_word", "Then_word", "Else_word", "Elseif_word", 
            "For_word", "Assign_op", "To_word", "Do_word", "Break_word", 
            "Return_word", "Comment_normal", "Comment_block", "Comment_sharp", 
            "Bool_word", "Int_word", "Float_word", "Str_word", "Array_word", 
            "Main_word", "Cons_word", "Dest_word", "Self_word", "Add", "Sub", 
            "Mul", "Div", "Mod", "Not", "And", "Or", "Equal", "Diff", "Greater", 
            "Lesser", "Greater_euqal", "Lesser_equal", "String_comp", "String_concat", 
            "Member_access_in", "Member_access_out", "Colon", "BOOLEANLIT", 
            "STRINGLIT", "BLOCKCOMMENT", "INTLIT", "FLOATLIT", "PROGRAM", 
            "MAIN", "EXTENDS", "BREAK", "CONT", "IF", "ELSEIF", "ELSE", 
            "FOR", "BOOLTRUE", "BOOLFALSE", "ARRAY", "IN", "INT", "FLOAT", 
            "BOOL", "RETURN", "CLASS", "NULL", "VAL", "VAR", "SELF", "CONS", 
            "DEST", "KEYWORD_NEW", "BY", "DO", "STRING", "THEN", "VOID", 
            "NIL", "THIS", "FINAL", "STATIC", "TO", "DOWNTO", "ADD_OP", 
            "SUB_OP", "MUL_OP", "FLOAT_DIVISION_OP", "MOD_OP", "NOT_OP", 
            "AND_OP", "OR_OP", "EQUAL_OP", "NOT_EQUAL_OP", "ASSIGN_OP", 
            "GREATER_OP", "LESS_OP", "GREATER_EQUAL_OP", "LESS_EQUAL_OP", 
            "STRING_COMP_OP", "STRING_CONCAT_OP", "CONCATENATION_OP", "MEMBER_ACCESS_OUT", 
            "LP", "RP", "LSB", "RSB", "LB", "RB", "SEMI", "DOT", "COMA", 
            "COLON", "ID", "WS", "UNTERMINATED_COMMENT", "ERROR_CHAR" ]

    ruleNames = [ "Class_word", "Prog_word", "Extends_word", "Void_word", 
                  "Var_word", "Val_word", "If_word", "Then_word", "Else_word", 
                  "Elseif_word", "For_word", "Assign_op", "To_word", "Do_word", 
                  "Break_word", "Return_word", "Comment_normal", "Comment_block", 
                  "Comment_sharp", "Bool_word", "Int_word", "Float_word", 
                  "Str_word", "Array_word", "Main_word", "Cons_word", "Dest_word", 
                  "Self_word", "Add", "Sub", "Mul", "Div", "Mod", "Not", 
                  "And", "Or", "Equal", "Diff", "Greater", "Lesser", "Greater_euqal", 
                  "Lesser_equal", "String_comp", "String_concat", "Member_access_in", 
                  "Member_access_out", "Colon", "BOOLEANLIT", "STRINGLIT", 
                  "ESC_SEQ", "ILL_ESC_SEQ", "OCTAL_ESC", "UNICODE_ESC", 
                  "HEX_DIGIT", "UNKNOW_ESC", "BLOCKCOMMENT", "INTLIT", "FLOATLIT", 
                  "INTERGER_PART", "EXPONENT", "FRACTION", "DECIMAL", "OCTAL", 
                  "HEX", "BIN", "PROGRAM", "MAIN", "EXTENDS", "BREAK", "CONT", 
                  "IF", "ELSEIF", "ELSE", "FOR", "BOOLTRUE", "BOOLFALSE", 
                  "ARRAY", "IN", "INT", "FLOAT", "BOOL", "RETURN", "CLASS", 
                  "NULL", "VAL", "VAR", "SELF", "CONS", "DEST", "KEYWORD_NEW", 
                  "BY", "DO", "STRING", "THEN", "VOID", "NIL", "THIS", "FINAL", 
                  "STATIC", "TO", "DOWNTO", "ADD_OP", "SUB_OP", "MUL_OP", 
                  "FLOAT_DIVISION_OP", "MOD_OP", "NOT_OP", "AND_OP", "OR_OP", 
                  "EQUAL_OP", "NOT_EQUAL_OP", "ASSIGN_OP", "GREATER_OP", 
                  "LESS_OP", "GREATER_EQUAL_OP", "LESS_EQUAL_OP", "STRING_COMP_OP", 
                  "STRING_CONCAT_OP", "CONCATENATION_OP", "MEMBER_ACCESS_OUT", 
                  "LP", "RP", "LSB", "RSB", "LB", "RB", "SEMI", "DOT", "COMA", 
                  "COLON", "ID", "NORM_ID", "SPEC_ID", "WS", "UNTERMINATED_COMMENT", 
                  "ERROR_CHAR" ]

    grammarFileName = "BKOOL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.STRINGLIT_action 
            actions[56] = self.INTLIT_action 
            actions[57] = self.FLOATLIT_action 
            actions[134] = self.UNTERMINATED_COMMENT_action 
            actions[135] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            	s = ""
            	check = False;
            	for i in range(len(self.text)):
            		s += self.text[i]
            		a = ''
            		if(i == len(self.text)-1): a = ''
            		else: a = self.text[i+1]
            		b = ((a != 'b') and  (a != 'f') and  (a != 'r') and  (a != 'n') and  (a != 't') and (a != '\'') and  (a != '"') and (a != '\\'))
            		if(self.text[i] == '\\' and b == True):
            			s += self.text[i+1]
            			check = True
            			break;
            	if(check == True):
            		self.text = s
            		self.text = self.text[1:]
            		raise IllegalEscape(self.text)
            	else:
            		self.text = s
            		self.text = self.text[1:-1]

     

    def INTLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	self.text = self.text.replace('_','')

     

    def FLOATLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	self.text = self.text.replace('_','')
            	##print("Float: ", self.text)

     

    def UNTERMINATED_COMMENT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             raise UnterminatedComment(self.text) 
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
             raise ErrorToken(self.text) 
     


